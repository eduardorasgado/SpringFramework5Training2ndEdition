<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.eduardocode</groupId>
	<artifactId>lightreserve</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>lightreserve</name>
	<description>electronic reservation</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		<!-- dependencias para la capa de model: jpa y postgres -->
		<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa -->
		<!-- dado que estamos trabajamos con spring boot, en este caso spring data jpa integra hibernate
		en su paquete -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
		<dependency>
		    <groupId>org.postgresql</groupId>
		    <artifactId>postgresql</artifactId>
		</dependency>
		
		<!-- paquete de seguridad con spring security -->
		<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-security -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		
		<!-- lambok es una utilidad que permite la creacion automatica de getters y setters -->
		<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
		<dependency>
		    <groupId>org.projectlombok</groupId>
		    <artifactId>lombok</artifactId>
		    <!-- provided significa que no va a empaquetarse sino va a ser usada previo al proceso de construccion -->
		    <scope>provided</scope>
		</dependency>
		
		<!-- dependencia para la documentacion de web APIs con swagger -->
		
		<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
		<dependency>
		    <groupId>io.springfox</groupId>
		    <artifactId>springfox-swagger2</artifactId>
		    <version>2.9.2</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
		<dependency>
		    <groupId>io.springfox</groupId>
		    <artifactId>springfox-swagger-ui</artifactId>
		    <version>2.9.2</version>
		</dependency>
		
		<!-- dependencia para la implementacion de una vista de login y administracion de la api.
		Es un motor de plantillas adecuado y eficiente para con spring boot -->
		<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-thymeleaf -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		
	</dependencies>

	<build>
		<finalName>light-reserve</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!-- configurando el plugin para poder generar una imagen con docker a partir del pom  -->
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.29.0</version>
				<!-- configurando las imagenes que se generaran de los contenedores -->
				<configuration>
					<images>
						<image>
							<!-- cuenta de docker hub/nombre de la imagen -->
							<name>eduardorasgadoruiz/${project.build.finalName}</name>
							<!-- construccion -->
							<build>
								<from>openjdk:latest</from>
								<!-- comandos a ejecutarse una vez este subida la imagen -->
								<!-- sera ejecutado por java con un perfil de spring para produccion en una carpeta especifica empaquetado en un jar -->
								<entryPoint>java -Dspring.profiles.active=prod -jar /Users/cheetos/application/${project.build.finalName}.jar</entryPoint>
								<assembly>
									<basedir>/Users/cheetos/application/</basedir>
									<descriptorRef>artifact</descriptorRef>
									<!-- peculiaridades del ensamblaje -->
									<inline>
										<id>assembly</id>
										<!-- donde se encuentra el archivo a partir del cual se va a generar la imagen -->
										<files>
											<file>
												<source>target/${project.build.finalName}.jar</source>
											</file>
										</files>
									</inline>
								</assembly>
								
								<tags>
									<!-- versionamiento de las imagenes -->
									<tag>latest</tag>
								</tags>
								<ports>
									<port>8080</port>
								</ports>
							</build>
							<!-- una vez que se construya se prosigue con la ejecucion -->
							<run>
								<namingStrategy>alias</namingStrategy>
							</run>
							<alias>${project.build.finalName}</alias>
						</image>
					</images>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
